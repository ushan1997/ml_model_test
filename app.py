# @author Gunaratne U.A
# @email it19753140@my.sliit.lk
#
from flask import Flask, render_template,  request, make_response, jsonify, Response
from werkzeug.utils import secure_filename
import os
import sys
from services.query_service import *
from services.area_detect_service import *
import json
from PIL import Image
import json
from json import JSONEncoder
import numpy as np
import base64

app = Flask(__name__)

UPLOAD_FOLDER = 'assets/upload'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

#api for test the application
@app.route('/areadt/testapi', methods=['GET'])
def test_api():
    return jsonify({
        "message": "server started .",
        "code":200,
        "resourse": 1
    })

#api for get the disese spread area
@app.route('/areadt/processimage', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        try:
            poly_array=[[([[106, 98], [105, 98], [104, 98], [103, 98], [102, 98], [101, 98], [100, 98], [99, 98], [99, 97], [98, 97], [97, 97], [96, 97], [95, 97], [94, 97], [93, 97], [93, 96], [92, 96], [91, 96], [91, 95], [90, 95], [90, 94], [89, 94], [89, 93], [88, 93], [87, 93], [87, 92], [87, 91], [86, 91], [86, 90], [86, 89], [85, 89], [85, 88], [86, 87], [86, 87], [86, 86], [87, 85], [87, 85], [88, 84], [88, 84], [89, 83], [89, 83], [90, 82], [91, 82], [92, 82], [93, 82], [93, 82], [94, 81], [95, 81], [96, 81], [97, 81], [98, 81], [99, 81], [100, 81], [101, 81], [101, 82], [102, 82], [103, 82], [103, 83], [104, 83], [104, 84], [104, 85], [105, 85], [105, 86], [105, 87], [106, 87], [106, 88], [106, 89], [106, 90], [106, 91], [106, 92], [106, 93], [106, 94], [106, 95], [106, 96], [106, 97], [106, 98], [106, 98]])],
            [([[161, 86], [160, 86], [159, 86], [158, 86], [157, 86], [156, 86], [156, 85], [155, 85], [154, 85], [153, 85], [153, 84], [152, 84], [151, 84], [150, 84], [149, 84], [148, 84], [147, 84], [147, 83], [146, 83], [145, 83], [145, 82], [144, 82], [143, 82], [142, 82], [142, 81], [141, 81], [141, 80], [140, 80], [139, 80], [139, 79], [138, 79], [138, 78], [137, 78], [137, 77], [136, 77], [135, 77], [135, 76], [134, 76], [134, 75], [133, 75], [133, 74], [132, 74], [132, 73], [131, 73], [131, 72], [131, 71], [131, 70], [131, 69], [131, 68], [131, 67], [132, 66], [132, 66], [133, 65], [133, 65], [134, 64], [134, 64], [135, 63], [136, 63], [137, 63], [137, 63], [138, 62], [139, 62], [140, 62], [141, 62], [142, 62], [143, 62], [144, 62], [145, 62], [146, 62], [147, 62], [147, 62], [148, 61], [148, 61], [148, 60], [149, 59], [149, 59], [149, 58], [148, 58], [149, 57], [150, 57], [150, 57], [151, 56], [152, 56], [153, 56], [154, 56], [155, 56], [156, 56], [156, 57], [157, 57], [158, 57], [158, 58], [159, 58], [160, 58], [160, 59], [160, 60], [161, 60], [161, 61], [161, 62], [161, 63], [161, 64], [161, 65], [161, 66], [161, 67], [161, 68], [161, 69], [161, 70], [161, 71], [161, 72], [161, 73], [161, 74], [161, 75], [161, 76], [161, 77], [161, 78], [161, 79], [161, 80], [161, 81], [161, 82], [161, 83], [161, 84], [161, 85], [161, 86], [161, 86]])],
            [([[364, 134], [363, 134], [362, 134], [361, 134], [361, 133], [360, 133], [360, 132], [359, 132], [359, 131], [359, 130], [359, 129], [358, 129], [358, 128], [358, 127], [357, 127], [357, 126], [356, 126], [356, 125], [356, 124], [356, 123], [356, 122], [356, 121], [356, 120], [355, 120], [354, 120], [353, 120], [353, 119], [352, 119], [351, 119], [350, 119], [350, 118], [350, 117], [350, 116], [349, 117], [349, 117], [348, 117], [347, 117], [347, 116], [347, 115], [346, 115], [345, 115], [344, 115], [344, 114], [343, 114], [343, 113], [342, 113], [341, 113], [341, 112], [340, 112], [340, 111], [340, 110], [339, 110], [338, 110], [338, 109], [337, 109], [337, 108], [337, 107], [336, 107], [336, 106], [335, 106], [335, 105], [336, 104], [336, 104], [337, 103], [337, 103], [338, 102], [339, 102], [339, 103], [340, 103], [341, 103], [342, 103], [342, 104], [343, 104], [343, 105], [344, 105], [345, 105], [345, 106], [345, 107], [345, 108], [346, 108], [346, 109], [347, 109], [347, 110], [348, 110], [348, 111], [349, 111], [349, 112], [350, 112], [351, 112], [351, 113], [351, 114], [351, 115], [351, 116], [352, 116], [352, 117], [352, 118], [353, 118], [354, 118], [354, 118], [355, 117], [355, 118], [356, 118], [357, 118], [357, 118], [358, 117], [358, 117], [359, 116], [359, 116], [359, 115], [359, 114], [359, 113], [359, 112], [359, 111], [359, 110], [359, 109], [359, 108], [359, 107], [359, 106], [359, 105], [358, 105], [358, 104], [358, 103], [358, 102], [358, 101], [357, 101], [357, 100], [356, 100], [356, 99], [356, 98], [355, 98], [355, 97], [355, 96], [354, 96], [354, 95], [353, 95], [353, 94], [352, 94], [352, 93], [351, 93], [351, 92], [350, 92], [350, 91], [349, 91], [349, 90], [348, 90], [348, 89], [347, 89], [346, 89], [345, 89], [345, 88], [344, 88], [343, 88], [342, 88], [341, 88], [341, 87], [340, 87], [339, 87], [338, 87], [337, 87], [337, 86], [336, 86], [335, 86], [334, 86], [333, 86], [332, 86], [331, 86], [330, 86], [329, 87], [329, 87], [328, 87], [327, 88], [327, 88], [326, 89], [326, 89], [325, 90], [325, 90], [324, 90], [323, 90], [323, 89], [322, 89], [321, 89], [321, 88], [321, 87], [320, 87], [320, 86], [320, 85], [320, 84], [320, 83], [320, 82], [319, 82], [319, 81], [319, 80], [319, 79], [319, 78], [319, 77], [319, 76], [319, 75], [319, 74], [319, 73], [320, 72], [320, 72], [320, 71], [320, 70], [320, 69], [320, 68], [320, 67], [320, 66], [320, 65], [320, 64], [320, 63], [319, 63], [319, 62], [319, 61], [319, 60], [319, 59], [319, 58], [319, 57], [319, 56], [319, 55], [319, 54], [320, 53], [320, 53], [320, 52], [320, 51], [320, 50], [321, 49], [322, 49], [322, 50], [323, 50], [323, 51], [324, 51], [325, 51], [326, 51], [326, 51], [327, 50], [328, 50], [329, 50], [330, 50], [331, 50], [332, 50], [333, 50], [333, 51], [334, 51], [334, 52], [335, 52], [335, 53], [336, 53], [337, 53], [337, 54], [337, 55], [338, 55], [338, 56], [338, 57], [339, 57], [339, 58], [339, 59], [339, 60], [340, 60], [340, 61], [340, 62], [340, 63], [341, 63], [341, 64], [341, 65], [342, 65], [342, 66], [342, 67], [343, 67], [343, 68], [344, 68], [344, 69], [344, 70], [345, 70], [345, 71], [346, 71], [346, 72], [346, 73], [347, 73], [347, 74], [347, 75], [348, 75], [348, 76], [349, 76], [349, 77], [349, 78], [350, 78], [350, 79], [351, 79], [351, 80], [352, 80], [352, 81], [353, 81], [353, 82], [353, 83], [353, 84], [354, 84], [354, 85], [355, 85], [355, 85], [356, 84], [356, 85], [357, 85], [357, 86], [358, 86], [359, 86], [360, 86], [360, 87], [360, 88], [360, 89], [360, 90], [361, 90], [361, 91], [362, 91], [362, 92], [363, 92], [363, 93], [363, 94], [363, 95], [364, 95], [364, 96], [364, 97], [364, 98], [364, 99], [365, 99], [365, 100], [365, 101], [365, 102], [365, 103], [365, 104], [365, 105], [365, 106], [365, 107], [365, 108], [365, 109], [365, 110], [365, 111], [365, 112], [365, 113], [365, 114], [365, 115], [365, 116], [365, 117], [365, 118], [365, 119], [365, 120], [365, 121], [365, 122], [365, 123], [365, 124], [365, 125], [365, 126], [365, 127], [365, 128], [365, 129], [365, 130], [365, 131], [365, 132], [365, 132], [364, 133], [364, 134], [364, 134]])]]
            #get request parameters
            json_output_path = "assets/output/output.json"
            class NumpyArrayEncoder(JSONEncoder):
                def default(self, obj):
                    if isinstance(obj, np.ndarray):
                        return obj.tolist()
                    return JSONEncoder.default(self, obj)
            numpyData = {"array": poly_array}
                            # use dump() to write array into file
            encodedNumpyData = json.dumps(numpyData, cls=NumpyArrayEncoder)
            print("Printing JSON serialized NumPy array")
            print(encodedNumpyData)
            with open(json_output_path, 'w') as outfile:
                json.dump(encodedNumpyData, outfile)

            return jsonify({
                "message": "Image processed sucessfully",
                "code":200,
            })
        except:
            jsonify({
                "message": "Something went wrong",
                "code":500,
                "resourse": ""
            })

@app.route('/areadt/getmask',methods=['GET'])
def get_mask():
    try:
        bulb_arr = get_mask_service()
        return jsonify({
            'message': "OK",
            'code':200,
            'resourse': bulb_arr,
            })

    except:
            jsonify({
                "message": "Something went wrong",
                "code":500,
                "resourse": ""
            })

@app.route('/areadt/image', methods=['POST'])
def get_file():
    fileImage = "./assets/output/lc_output.png"
    image = open(fileImage, 'rb')
    image_read = image.read()
    image_64_encode = base64.encodebytes(image_read)
    utfResult = image_64_encode.decode("utf-8")
    print(str(utfResult.strip()))
    # return json.dumps(str(utfResult.strip()))
    return jsonify({
        "message": "Image processed sucessfully",
        "disease": str(utfResult.strip())
    })
    # print(json.dumps(data))
    # return json.dumps(data)


@app.route('/areadt/identify', methods=['POST'])
def identify_disease():
    image_result = request.form['image_result']
    clinical_result = request.form['clinical_result']
    return prect_disease(image_result=image_result, clinical_result=clinical_result)


@app.route("/insert", methods=["POST"])
def insert():
    data = request.get_json()
    print("Json Obj", data)
    name = data["name"]
    print("name", name)
    result = save_activity_details((name,))
    return make_response(jsonify({"name": result}), 200)


if __name__ == '__main__':
    app.run(debug=True, port=5000)
